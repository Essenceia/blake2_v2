.program data_wr

.define PUBLIC CTRL_READY_PIN 19
.define PUBLIC BUS_CLK_PIN    28

; send data from rpi to hw, writes both ctrl and data bus 
; expected to be running at 2xBUS_CLK freq

; will use auto pulling from the tx fifo to write to the gpio
; if the fifo is empty pull should block
; -> when blocked the content of the X scratch should be written
;    this will deactivate the valid bit on the data transfer line

; write X scratch register content, will be read to the OSR during blocking
; -> set to all 0s 

; wait for ready 
; then read config and data from the fifo ( streamed from dma )
; if no data is available write then content of X scratch
start:
.wrap_target
	set pins, 0 
	wait 1 gpio CTRL_READY_PIN
	pull block
	wait 0 gpio BUS_CLK_PIN
wr:
	out pins, 32
	jmp !OSRE wr
.wrap

% c-sdk {
static inline void data_wr_program_init(PIO pio, uint sm, uint offset, float fdiv){
	uint i;
	pio_sm_config c = bus_clk_program_get_default_config(offset);

	// enable pins, connect to pio
	for(i=DATA_BASE_PIN; i < DATA_BASE_PIN + DATA_W; i++){ // data
		pio_gpio_init(pio, i);
	}
	pio_sm_set_consecutive_pindirs(pio, sm, DATA_BASE_PIN, DATA_W, true);
	for(uint i=CTRL_DATA_BASE_PIN; i < CTRL_DATA_BASE_PIN + CTRL_DATA_W; i++){ // ctrl data
		pio_gpio_init(pio, i);
	}
	pio_sm_set_consecutive_pindirs(pio, sm, CTRL_DATA_BASE_PIN, CTRL_DATA_W, true);

	pio_gpio_init(pio, CTRL_READY_PIN);
	pio_sm_set_consecutive_pindirs(pio, sm, CTRL_READY_PIN, 1, false); // input pin, technically not needed to be set for input
	pio_sm_set_consecutive_pindirs(pio, sm, BUS_CLK_PIN, 1, false); // pin already init by bus clk pio
	
	// join fifo's for one large fifo since sm is tx only
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

	// enable fifo autopull and set threashold (32)
	sm_config_set_out_shift(&c, true, true, 32);

	//set "out" instruction to cover the entire gpio range
	sm_config_set_out_pins(&c, 0, 32);

	// set "set" instruction base pin offset to ctrl bit to overcome the 
	// 5b wide wright limitation
	_Static_assert(CTRL_BASE_PIN+5 > CTRL_VALID_PIN);
	sm_config_set_set_pins(&c, CTRL_VALID_PIN, 4);

	// set config
	pio_sm_init(pio, sm, offset, &c); 

	// set clk freq 
	pio_sm_set_clkdiv(pio, sm, fdiv);

	// clear fifo's
	pio_sm_clear_fifos(pio, sm);	
}
%}

